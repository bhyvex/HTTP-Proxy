TODO
----

Here are all the features I plan to add to HTTP::Proxy, in the form of a
roadmap.

ASAP
 - better connection handling
 - I suppose this means looking at the Connection: headers
   in both the request and the response

Version 0.05
 - Control the proxy via specific URIs
 - Commands are called asking for http://proxy/cmd
   (the host part of the URI should be configurable)
   where cmd is a key to a dispatch table
 - Example commands
   * status => return some debug information
   * config => live config management (uses forms)
   * should be able to add more in inheriting classes
     => as an example, we could rewrite RGS's biscuit script
 - all this requires CGI/HTML, which I don't want to write or maintain
   the program should automatically create the configuration forms
   and handle the HTML/CSS stuff
 - configuration commands are handled by the parent process, so that
   future forked process obey the new configuration
 - how do subclassed HTTP::Proxy modules handle this?
 - can someone add his own commands by modifying either the class or
   the instance dispatch table?
 - the parent process preforks children, when a control URL is requested
   the child can write data to a special file/pipe and kill HUP the
   parent so that it reads the new information

Version 0.06
 - insert callbacks/filters in the various stages of the process
   => to modify the client request
   => to modify the server answer
 - filters depend on MIME type for responses
   => text/html
   => text/*
 - these filters should be stackable
   => push_request_filter( \&callback )
   => push_response_filter( 'text/html' => \&callback )
   => other ways to access both stacks?
 - maybe store them like this:
   $filters->{scheme}{mime_rx}{authority_rx}{path_rx} = coderef
   all the *_rx keys would be regexen, so that for a response
   that matches the scheme and the 3 regex, the code is run
   => filters are applied one over the other... in which order ?
   => maybe arrays are better than hashes, since we can at least keep
      the order in which the filters were pushed, and we still have
      to match against the whole list

   my $filters = $self->filters;
   # this scheme's filters
   for my $sc (grep { $req->uri->scheme =~ $_->[0] } @$filters){
       for my $auth (grep { $req->uri->authority =~ $_->[0] } @$sc) {
           for my $path (grep { $req->uri->path =~ $_->[0] } @auth {
              # run all the filters one after the other
           }
       }
   }



Version 0.07
 - handle big responses (>1Mb) with the LWP::UA callback system
   => short responses are concatenated together in a simple scalar,
      that gets filtered at the end
   => longer responses are filtered on the fly and sent as-is to the
      client. Since only chunks of the response are filtered, this can
      result in badly filtered data (I don't think we can do anything
      about it...)

Version 0.08
 - proxy a https site, so as to filter and record, just as we do for
   http requests.
   => example: http://proxy/https://www.secure.com:443/index.html
   => This kind of stuff requires some content rewriting...

Later...
 - make use of the keep-alive capabilities of LWP::UserAgent
   => one subprocess should accept a predefined number of requests
      (or all of them until it dies)
 - better handling of broken connection (from the client)
 - same for FTP? how is FTP handled by LWP::UserAgent?
   => what kind of data is returned? HTML? how?
 - support for gopher 
   gopher://gopher.tc.umn.edu/
   gopher://marvel.loc.gov/
 - support for hop by hop headers :
   => Connection, Keep-Alive, Proxy-Authenticate, Proxy-Authorization, TE,
      Trailers, Transfer-Encoding, Upgrade
 - handle big requests (see HTTP::Daemon::get_request documentation)

Better left to other modules
 - Browsing recording in a tree-like structure (thanks to Referer:)
   => maybe that should be left to a WWW::Mechanize::Builder module
 - become a POE component (OK, maybe that's another project)
   => POE::Component::?::?


Useful documentation:

http://www.stonehenge.com/merlyn/WebTechniques/col11.html
http://www.foad.org/~abigail/Perl/proxy.pl
http://rgarciasuarez.free.fr/perl/biscuit
http://www.jmarshall.com/tools/cgiproxy/
